<?php
/**
 * Obit
 *
 * PHP version 7.2
 *
 * @category Class
 * @package  Obada
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * OBADA API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: techops@obada.io
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.0.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Obada\Entities;

use \ArrayAccess;
use \Obada\ObjectSerializer;

/**
 * Obit Class Doc Comment
 *
 * @category Class
 * @description OBADA record.
 * @package  Obada
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class Obit implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'Obit';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'obitDid' => 'string',
        'usn' => 'string',
        'obitDidVersions' => 'string[]',
        'ownerDid' => 'string',
        'obdDid' => 'string',
        'obitStatus' => 'string',
        'manufacturer' => 'string',
        'partNumber' => 'string',
        'serialNumberHash' => 'string',
        'metadata' => '\Obada\Entities\MetaDataRecord[]',
        'docLinks' => '\Obada\Entities\DocumentLink[]',
        'structuredData' => '\Obada\Entities\StructureDataRecord[]',
        'modifiedAt' => '\DateTime',
        'rootHash' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPIFormats = [
        'obitDid' => null,
        'usn' => null,
        'obitDidVersions' => null,
        'ownerDid' => null,
        'obdDid' => null,
        'obitStatus' => null,
        'manufacturer' => null,
        'partNumber' => null,
        'serialNumberHash' => null,
        'metadata' => null,
        'docLinks' => null,
        'structuredData' => null,
        'modifiedAt' => 'date-time',
        'rootHash' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'obitDid' => 'obit_did',
        'usn' => 'usn',
        'obitDidVersions' => 'obit_did_versions',
        'ownerDid' => 'owner_did',
        'obdDid' => 'obd_did',
        'obitStatus' => 'obit_status',
        'manufacturer' => 'manufacturer',
        'partNumber' => 'part_number',
        'serialNumberHash' => 'serial_number_hash',
        'metadata' => 'metadata',
        'docLinks' => 'doc_links',
        'structuredData' => 'structured_data',
        'modifiedAt' => 'modified_at',
        'rootHash' => 'root_hash'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'obitDid' => 'setObitDid',
        'usn' => 'setUsn',
        'obitDidVersions' => 'setObitDidVersions',
        'ownerDid' => 'setOwnerDid',
        'obdDid' => 'setObdDid',
        'obitStatus' => 'setObitStatus',
        'manufacturer' => 'setManufacturer',
        'partNumber' => 'setPartNumber',
        'serialNumberHash' => 'setSerialNumberHash',
        'metadata' => 'setMetadata',
        'docLinks' => 'setDocLinks',
        'structuredData' => 'setStructuredData',
        'modifiedAt' => 'setModifiedAt',
        'rootHash' => 'setRootHash'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'obitDid' => 'getObitDid',
        'usn' => 'getUsn',
        'obitDidVersions' => 'getObitDidVersions',
        'ownerDid' => 'getOwnerDid',
        'obdDid' => 'getObdDid',
        'obitStatus' => 'getObitStatus',
        'manufacturer' => 'getManufacturer',
        'partNumber' => 'getPartNumber',
        'serialNumberHash' => 'getSerialNumberHash',
        'metadata' => 'getMetadata',
        'docLinks' => 'getDocLinks',
        'structuredData' => 'getStructuredData',
        'modifiedAt' => 'getModifiedAt',
        'rootHash' => 'getRootHash'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['obitDid'] = isset($data['obitDid']) ? $data['obitDid'] : null;
        $this->container['usn'] = isset($data['usn']) ? $data['usn'] : null;
        $this->container['obitDidVersions'] = isset($data['obitDidVersions']) ? $data['obitDidVersions'] : null;
        $this->container['ownerDid'] = isset($data['ownerDid']) ? $data['ownerDid'] : null;
        $this->container['obdDid'] = isset($data['obdDid']) ? $data['obdDid'] : null;
        $this->container['obitStatus'] = isset($data['obitStatus']) ? $data['obitStatus'] : null;
        $this->container['manufacturer'] = isset($data['manufacturer']) ? $data['manufacturer'] : null;
        $this->container['partNumber'] = isset($data['partNumber']) ? $data['partNumber'] : null;
        $this->container['serialNumberHash'] = isset($data['serialNumberHash']) ? $data['serialNumberHash'] : null;
        $this->container['metadata'] = isset($data['metadata']) ? $data['metadata'] : null;
        $this->container['docLinks'] = isset($data['docLinks']) ? $data['docLinks'] : null;
        $this->container['structuredData'] = isset($data['structuredData']) ? $data['structuredData'] : null;
        $this->container['modifiedAt'] = isset($data['modifiedAt']) ? $data['modifiedAt'] : null;
        $this->container['rootHash'] = isset($data['rootHash']) ? $data['rootHash'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['obitDid'] === null) {
            $invalidProperties[] = "'obitDid' can't be null";
        }
        if ($this->container['usn'] === null) {
            $invalidProperties[] = "'usn' can't be null";
        }
        if ($this->container['obitDidVersions'] === null) {
            $invalidProperties[] = "'obitDidVersions' can't be null";
        }
        if ($this->container['ownerDid'] === null) {
            $invalidProperties[] = "'ownerDid' can't be null";
        }
        if ($this->container['obdDid'] === null) {
            $invalidProperties[] = "'obdDid' can't be null";
        }
        if ($this->container['obitStatus'] === null) {
            $invalidProperties[] = "'obitStatus' can't be null";
        }
        if ($this->container['manufacturer'] === null) {
            $invalidProperties[] = "'manufacturer' can't be null";
        }
        if ($this->container['partNumber'] === null) {
            $invalidProperties[] = "'partNumber' can't be null";
        }
        if ($this->container['serialNumberHash'] === null) {
            $invalidProperties[] = "'serialNumberHash' can't be null";
        }
        if ($this->container['rootHash'] === null) {
            $invalidProperties[] = "'rootHash' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets obitDid
     *
     * @return string
     */
    public function getObitDid()
    {
        return $this->container['obitDid'];
    }

    /**
     * Sets obitDid
     *
     * @param string $obitDid OBADA decentralized identifier
     *
     * @return $this
     */
    public function setObitDid($obitDid)
    {
        $this->container['obitDid'] = $obitDid;

        return $this;
    }

    /**
     * Gets usn
     *
     * @return string
     */
    public function getUsn()
    {
        return $this->container['usn'];
    }

    /**
     * Sets usn
     *
     * @param string $usn Test An 8-12 character “URL Shortened” obit. Create the USN by Base(58) encoding the OBIT ID. Take the first 8 characters. Check for duplicates. With 16 million OBITs there is a 40% chance of collision. If so, add 4 characters. Repeat as necessary until a unique USN is generated.
     *
     * @return $this
     */
    public function setUsn($usn)
    {
        $this->container['usn'] = $usn;

        return $this;
    }

    /**
     * Gets obitDidVersions
     *
     * @return string[]
     */
    public function getObitDidVersions()
    {
        return $this->container['obitDidVersions'];
    }

    /**
     * Sets obitDidVersions
     *
     * @param string[] $obitDidVersions Client generated things. First hash + last hash
     *
     * @return $this
     */
    public function setObitDidVersions($obitDidVersions)
    {
        $this->container['obitDidVersions'] = $obitDidVersions;

        return $this;
    }

    /**
     * Gets ownerDid
     *
     * @return string
     */
    public function getOwnerDid()
    {
        return $this->container['ownerDid'];
    }

    /**
     * Sets ownerDid
     *
     * @param string $ownerDid Owner is the person/entity that owns the obit and the physical asset it represents. Format is a DID like did:obada:owner:1234. However in the current version only test numbers will be used.
     *
     * @return $this
     */
    public function setOwnerDid($ownerDid)
    {
        $this->container['ownerDid'] = $ownerDid;

        return $this;
    }

    /**
     * Gets obdDid
     *
     * @return string
     */
    public function getObdDid()
    {
        return $this->container['obdDid'];
    }

    /**
     * Sets obdDid
     *
     * @param string $obdDid Future use. The OBD DID is formatted like did:obada:obd:1234, which represents a utility token tracking orders and proofs.
     *
     * @return $this
     */
    public function setObdDid($obdDid)
    {
        $this->container['obdDid'] = $obdDid;

        return $this;
    }

    /**
     * Gets obitStatus
     *
     * @return string
     */
    public function getObitStatus()
    {
        return $this->container['obitStatus'];
    }

    /**
     * Sets obitStatus
     *
     * @param string $obitStatus Represent available Obit statuses:   - FUNCTIONAL   - NON_FUNCTIONAL   - DISPOSED   - STOLEN   - DISABLED_BY_OWNER
     *
     * @return $this
     */
    public function setObitStatus($obitStatus)
    {
        $this->container['obitStatus'] = $obitStatus;

        return $this;
    }

    /**
     * Gets manufacturer
     *
     * @return string
     */
    public function getManufacturer()
    {
        return $this->container['manufacturer'];
    }

    /**
     * Sets manufacturer
     *
     * @param string $manufacturer Waiting more specific details from Rohi
     *
     * @return $this
     */
    public function setManufacturer($manufacturer)
    {
        $this->container['manufacturer'] = $manufacturer;

        return $this;
    }

    /**
     * Gets partNumber
     *
     * @return string
     */
    public function getPartNumber()
    {
        return $this->container['partNumber'];
    }

    /**
     * Sets partNumber
     *
     * @param string $partNumber Manufacturer provided. In cases where no part number is provided for the product, use model, or the most specific ID available from the manufacturer. MWCN2LL/A (an iPhone 11 Pro, Silver, 256GB, model A2160)
     *
     * @return $this
     */
    public function setPartNumber($partNumber)
    {
        $this->container['partNumber'] = $partNumber;

        return $this;
    }

    /**
     * Gets serialNumberHash
     *
     * @return string
     */
    public function getSerialNumberHash()
    {
        return $this->container['serialNumberHash'];
    }

    /**
     * Sets serialNumberHash
     *
     * @param string $serialNumberHash Serial number hashed with sha256 hash function
     *
     * @return $this
     */
    public function setSerialNumberHash($serialNumberHash)
    {
        $this->container['serialNumberHash'] = $serialNumberHash;

        return $this;
    }

    /**
     * Gets metadata
     *
     * @return \Obada\Entities\MetaDataRecord[]|null
     */
    public function getMetadata()
    {
        return $this->container['metadata'];
    }

    /**
     * Sets metadata
     *
     * @param \Obada\Entities\MetaDataRecord[]|null $metadata Get description from Rohi
     *
     * @return $this
     */
    public function setMetadata($metadata)
    {
        $this->container['metadata'] = $metadata;

        return $this;
    }

    /**
     * Gets docLinks
     *
     * @return \Obada\Entities\DocumentLink[]|null
     */
    public function getDocLinks()
    {
        return $this->container['docLinks'];
    }

    /**
     * Sets docLinks
     *
     * @param \Obada\Entities\DocumentLink[]|null $docLinks To generate this link, take an SHA-256 hash of the document, and link to it as https://www.some-website.com?h1=hash-of-document. Note this does not yet adhere to the hashlink standard.
     *
     * @return $this
     */
    public function setDocLinks($docLinks)
    {
        $this->container['docLinks'] = $docLinks;

        return $this;
    }

    /**
     * Gets structuredData
     *
     * @return \Obada\Entities\StructureDataRecord[]|null
     */
    public function getStructuredData()
    {
        return $this->container['structuredData'];
    }

    /**
     * Sets structuredData
     *
     * @param \Obada\Entities\StructureDataRecord[]|null $structuredData Same as metadata but bigger. Key (string) => Value (string) (hash per line sha256(key + value))
     *
     * @return $this
     */
    public function setStructuredData($structuredData)
    {
        $this->container['structuredData'] = $structuredData;

        return $this;
    }

    /**
     * Gets modifiedAt
     *
     * @return \DateTime|null
     */
    public function getModifiedAt()
    {
        return $this->container['modifiedAt'];
    }

    /**
     * Sets modifiedAt
     *
     * @param \DateTime|null $modifiedAt modifiedAt
     *
     * @return $this
     */
    public function setModifiedAt($modifiedAt)
    {
        $this->container['modifiedAt'] = $modifiedAt;

        return $this;
    }

    /**
     * Gets rootHash
     *
     * @return string
     */
    public function getRootHash()
    {
        return $this->container['rootHash'];
    }

    /**
     * Sets rootHash
     *
     * @param string $rootHash Hash calculated by SHA256 (previous Obit root hash + Obit data). TODO: Discuss root hash with Rohi.
     *
     * @return $this
     */
    public function setRootHash($rootHash)
    {
        $this->container['rootHash'] = $rootHash;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


