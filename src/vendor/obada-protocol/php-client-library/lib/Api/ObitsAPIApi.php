<?php
/**
 * ObitsAPIApi
 * PHP version 7.2
 *
 * @category Class
 * @package  Obada\Client
 * @author   Obada Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * OBADA API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the Obada document: 0.0.1
 * Contact: techops@obada.io
 * Generated by: https://openapi-generator.tech
 * Obada Generator version: 5.0.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by Obada Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Obada\Client\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use Obada\Client\ApiException;
use Obada\Client\Configuration;
use Obada\Client\HeaderSelector;
use Obada\Client\ObjectSerializer;

/**
 * ObitsAPIApi Class Doc Comment
 *
 * @category Class
 * @package  Obada\Client
 * @author   Obada Generator team
 * @link     https://openapi-generator.tech
 */
class ObitsAPIApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $host_index (Optional) host index to select the list of hosts if defined in the Obada spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        $host_index = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $host_index;
    }

    /**
     * Set the host index
     *
     * @param  int Host index (required)
     */
    public function setHostIndex($host_index)
    {
        $this->hostIndex = $host_index;
    }

    /**
     * Get the host index
     *
     * @return Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation createObit
     *
     * @param  \Obada\Client\Model\NewObit $new_obit new_obit (optional)
     *
     * @throws \Obada\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function createObit($new_obit = null)
    {
        $this->createObitWithHttpInfo($new_obit);
    }

    /**
     * Operation createObitWithHttpInfo
     *
     * @param  \Obada\Client\Model\NewObit $new_obit (optional)
     *
     * @throws \Obada\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function createObitWithHttpInfo($new_obit = null)
    {
        $request = $this->createObitRequest($new_obit);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Obada\Client\Model\UnprocessableEntity',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation createObitAsync
     *
     * 
     *
     * @param  \Obada\Client\Model\NewObit $new_obit (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createObitAsync($new_obit = null)
    {
        return $this->createObitAsyncWithHttpInfo($new_obit)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation createObitAsyncWithHttpInfo
     *
     * 
     *
     * @param  \Obada\Client\Model\NewObit $new_obit (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createObitAsyncWithHttpInfo($new_obit = null)
    {
        $returnType = '';
        $request = $this->createObitRequest($new_obit);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'createObit'
     *
     * @param  \Obada\Client\Model\NewObit $new_obit (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function createObitRequest($new_obit = null)
    {

        $resourcePath = '/obits';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;




        // body params
        $_tempBody = null;
        if (isset($new_obit)) {
            $_tempBody = $new_obit;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation removeObit
     *
     * @param  string $obit_did The given ObitDID argument (required)
     *
     * @throws \Obada\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function removeObit($obit_did)
    {
        $this->removeObitWithHttpInfo($obit_did);
    }

    /**
     * Operation removeObitWithHttpInfo
     *
     * @param  string $obit_did The given ObitDID argument (required)
     *
     * @throws \Obada\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function removeObitWithHttpInfo($obit_did)
    {
        $request = $this->removeObitRequest($obit_did);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Obada\Client\Model\NotFound',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation removeObitAsync
     *
     * 
     *
     * @param  string $obit_did The given ObitDID argument (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function removeObitAsync($obit_did)
    {
        return $this->removeObitAsyncWithHttpInfo($obit_did)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation removeObitAsyncWithHttpInfo
     *
     * 
     *
     * @param  string $obit_did The given ObitDID argument (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function removeObitAsyncWithHttpInfo($obit_did)
    {
        $returnType = '';
        $request = $this->removeObitRequest($obit_did);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'removeObit'
     *
     * @param  string $obit_did The given ObitDID argument (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function removeObitRequest($obit_did)
    {
        // verify the required parameter 'obit_did' is set
        if ($obit_did === null || (is_array($obit_did) && count($obit_did) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $obit_did when calling removeObit'
            );
        }

        $resourcePath = '/obits/{obit_did}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($obit_did !== null) {
            $resourcePath = str_replace(
                '{' . 'obit_did' . '}',
                ObjectSerializer::toPathValue($obit_did),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation searchObits
     *
     * @param  string $serial_number_hash serial_number_hash (optional)
     * @param  string $obit_status obit_status (optional)
     * @param  string $manufacturer manufacturer (optional)
     * @param  string $part_number part_number (optional)
     * @param  string $usn Universal serial number (optional)
     * @param  string $owner_did OBADA owner DID (optional)
     * @param  int $offset Number of records to skip for pagination. (optional, default to 0)
     * @param  int $limit Maximum number of records to return. (optional, default to 0)
     *
     * @throws \Obada\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Obada\Client\Model\InlineResponse200
     */
    public function searchObits($serial_number_hash = null, $obit_status = null, $manufacturer = null, $part_number = null, $usn = null, $owner_did = null, $offset = 0, $limit = 0)
    {
        list($response) = $this->searchObitsWithHttpInfo($serial_number_hash, $obit_status, $manufacturer, $part_number, $usn, $owner_did, $offset, $limit);
        return $response;
    }

    /**
     * Operation searchObitsWithHttpInfo
     *
     * @param  string $serial_number_hash (optional)
     * @param  string $obit_status (optional)
     * @param  string $manufacturer (optional)
     * @param  string $part_number (optional)
     * @param  string $usn Universal serial number (optional)
     * @param  string $owner_did OBADA owner DID (optional)
     * @param  int $offset Number of records to skip for pagination. (optional, default to 0)
     * @param  int $limit Maximum number of records to return. (optional, default to 0)
     *
     * @throws \Obada\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Obada\Client\Model\InlineResponse200, HTTP status code, HTTP response headers (array of strings)
     */
    public function searchObitsWithHttpInfo($serial_number_hash = null, $obit_status = null, $manufacturer = null, $part_number = null, $usn = null, $owner_did = null, $offset = 0, $limit = 0)
    {
        $request = $this->searchObitsRequest($serial_number_hash, $obit_status, $manufacturer, $part_number, $usn, $owner_did, $offset, $limit);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\Obada\Client\Model\InlineResponse200' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Obada\Client\Model\InlineResponse200', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Obada\Client\Model\InlineResponse200';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Obada\Client\Model\InlineResponse200',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation searchObitsAsync
     *
     * 
     *
     * @param  string $serial_number_hash (optional)
     * @param  string $obit_status (optional)
     * @param  string $manufacturer (optional)
     * @param  string $part_number (optional)
     * @param  string $usn Universal serial number (optional)
     * @param  string $owner_did OBADA owner DID (optional)
     * @param  int $offset Number of records to skip for pagination. (optional, default to 0)
     * @param  int $limit Maximum number of records to return. (optional, default to 0)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function searchObitsAsync($serial_number_hash = null, $obit_status = null, $manufacturer = null, $part_number = null, $usn = null, $owner_did = null, $offset = 0, $limit = 0)
    {
        return $this->searchObitsAsyncWithHttpInfo($serial_number_hash, $obit_status, $manufacturer, $part_number, $usn, $owner_did, $offset, $limit)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation searchObitsAsyncWithHttpInfo
     *
     * 
     *
     * @param  string $serial_number_hash (optional)
     * @param  string $obit_status (optional)
     * @param  string $manufacturer (optional)
     * @param  string $part_number (optional)
     * @param  string $usn Universal serial number (optional)
     * @param  string $owner_did OBADA owner DID (optional)
     * @param  int $offset Number of records to skip for pagination. (optional, default to 0)
     * @param  int $limit Maximum number of records to return. (optional, default to 0)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function searchObitsAsyncWithHttpInfo($serial_number_hash = null, $obit_status = null, $manufacturer = null, $part_number = null, $usn = null, $owner_did = null, $offset = 0, $limit = 0)
    {
        $returnType = '\Obada\Client\Model\InlineResponse200';
        $request = $this->searchObitsRequest($serial_number_hash, $obit_status, $manufacturer, $part_number, $usn, $owner_did, $offset, $limit);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'searchObits'
     *
     * @param  string $serial_number_hash (optional)
     * @param  string $obit_status (optional)
     * @param  string $manufacturer (optional)
     * @param  string $part_number (optional)
     * @param  string $usn Universal serial number (optional)
     * @param  string $owner_did OBADA owner DID (optional)
     * @param  int $offset Number of records to skip for pagination. (optional, default to 0)
     * @param  int $limit Maximum number of records to return. (optional, default to 0)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function searchObitsRequest($serial_number_hash = null, $obit_status = null, $manufacturer = null, $part_number = null, $usn = null, $owner_did = null, $offset = 0, $limit = 0)
    {
        if ($offset !== null && $offset < 0) {
            throw new \InvalidArgumentException('invalid value for "$offset" when calling ObitsAPIApi.searchObits, must be bigger than or equal to 0.');
        }

        if ($limit !== null && $limit > 100) {
            throw new \InvalidArgumentException('invalid value for "$limit" when calling ObitsAPIApi.searchObits, must be smaller than or equal to 100.');
        }
        if ($limit !== null && $limit < 0) {
            throw new \InvalidArgumentException('invalid value for "$limit" when calling ObitsAPIApi.searchObits, must be bigger than or equal to 0.');
        }


        $resourcePath = '/obits';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($serial_number_hash !== null) {
            if('form' === 'form' && is_array($serial_number_hash)) {
                foreach($serial_number_hash as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['serial_number_hash'] = $serial_number_hash;
            }
        }
        // query params
        if ($obit_status !== null) {
            if('form' === 'form' && is_array($obit_status)) {
                foreach($obit_status as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['obit_status'] = $obit_status;
            }
        }
        // query params
        if ($manufacturer !== null) {
            if('form' === 'form' && is_array($manufacturer)) {
                foreach($manufacturer as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['manufacturer'] = $manufacturer;
            }
        }
        // query params
        if ($part_number !== null) {
            if('form' === 'form' && is_array($part_number)) {
                foreach($part_number as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['part_number'] = $part_number;
            }
        }
        // query params
        if ($usn !== null) {
            if('form' === 'form' && is_array($usn)) {
                foreach($usn as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['usn'] = $usn;
            }
        }
        // query params
        if ($owner_did !== null) {
            if('form' === 'form' && is_array($owner_did)) {
                foreach($owner_did as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['owner_did'] = $owner_did;
            }
        }
        // query params
        if ($offset !== null) {
            if('form' === 'form' && is_array($offset)) {
                foreach($offset as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['offset'] = $offset;
            }
        }
        // query params
        if ($limit !== null) {
            if('form' === 'form' && is_array($limit)) {
                foreach($limit as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['limit'] = $limit;
            }
        }



        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation showObit
     *
     * @param  string $obit_did The given ObitDID argument (required)
     *
     * @throws \Obada\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function showObit($obit_did)
    {
        $this->showObitWithHttpInfo($obit_did);
    }

    /**
     * Operation showObitWithHttpInfo
     *
     * @param  string $obit_did The given ObitDID argument (required)
     *
     * @throws \Obada\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function showObitWithHttpInfo($obit_did)
    {
        $request = $this->showObitRequest($obit_did);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Obada\Client\Model\NotFound',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation showObitAsync
     *
     * 
     *
     * @param  string $obit_did The given ObitDID argument (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function showObitAsync($obit_did)
    {
        return $this->showObitAsyncWithHttpInfo($obit_did)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation showObitAsyncWithHttpInfo
     *
     * 
     *
     * @param  string $obit_did The given ObitDID argument (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function showObitAsyncWithHttpInfo($obit_did)
    {
        $returnType = '';
        $request = $this->showObitRequest($obit_did);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'showObit'
     *
     * @param  string $obit_did The given ObitDID argument (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function showObitRequest($obit_did)
    {
        // verify the required parameter 'obit_did' is set
        if ($obit_did === null || (is_array($obit_did) && count($obit_did) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $obit_did when calling showObit'
            );
        }

        $resourcePath = '/obits/{obit_did}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($obit_did !== null) {
            $resourcePath = str_replace(
                '{' . 'obit_did' . '}',
                ObjectSerializer::toPathValue($obit_did),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation showObitHistory
     *
     * @param  string $obit_did The given ObitDID argument (required)
     *
     * @throws \Obada\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Obada\Client\Model\InlineResponse2001|\Obada\Client\Model\NotFound
     */
    public function showObitHistory($obit_did)
    {
        list($response) = $this->showObitHistoryWithHttpInfo($obit_did);
        return $response;
    }

    /**
     * Operation showObitHistoryWithHttpInfo
     *
     * @param  string $obit_did The given ObitDID argument (required)
     *
     * @throws \Obada\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Obada\Client\Model\InlineResponse2001|\Obada\Client\Model\NotFound, HTTP status code, HTTP response headers (array of strings)
     */
    public function showObitHistoryWithHttpInfo($obit_did)
    {
        $request = $this->showObitHistoryRequest($obit_did);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\Obada\Client\Model\InlineResponse2001' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Obada\Client\Model\InlineResponse2001', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\Obada\Client\Model\NotFound' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Obada\Client\Model\NotFound', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Obada\Client\Model\InlineResponse2001';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Obada\Client\Model\InlineResponse2001',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Obada\Client\Model\NotFound',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation showObitHistoryAsync
     *
     * 
     *
     * @param  string $obit_did The given ObitDID argument (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function showObitHistoryAsync($obit_did)
    {
        return $this->showObitHistoryAsyncWithHttpInfo($obit_did)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation showObitHistoryAsyncWithHttpInfo
     *
     * 
     *
     * @param  string $obit_did The given ObitDID argument (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function showObitHistoryAsyncWithHttpInfo($obit_did)
    {
        $returnType = '\Obada\Client\Model\InlineResponse2001';
        $request = $this->showObitHistoryRequest($obit_did);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'showObitHistory'
     *
     * @param  string $obit_did The given ObitDID argument (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function showObitHistoryRequest($obit_did)
    {
        // verify the required parameter 'obit_did' is set
        if ($obit_did === null || (is_array($obit_did) && count($obit_did) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $obit_did when calling showObitHistory'
            );
        }

        $resourcePath = '/obits/{obit_did}/history';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($obit_did !== null) {
            $resourcePath = str_replace(
                '{' . 'obit_did' . '}',
                ObjectSerializer::toPathValue($obit_did),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updateObit
     *
     * @param  string $obit_did The given ObitDID argument (required)
     *
     * @throws \Obada\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function updateObit($obit_did)
    {
        $this->updateObitWithHttpInfo($obit_did);
    }

    /**
     * Operation updateObitWithHttpInfo
     *
     * @param  string $obit_did The given ObitDID argument (required)
     *
     * @throws \Obada\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateObitWithHttpInfo($obit_did)
    {
        $request = $this->updateObitRequest($obit_did);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Obada\Client\Model\NotFound',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation updateObitAsync
     *
     * 
     *
     * @param  string $obit_did The given ObitDID argument (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateObitAsync($obit_did)
    {
        return $this->updateObitAsyncWithHttpInfo($obit_did)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation updateObitAsyncWithHttpInfo
     *
     * 
     *
     * @param  string $obit_did The given ObitDID argument (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateObitAsyncWithHttpInfo($obit_did)
    {
        $returnType = '';
        $request = $this->updateObitRequest($obit_did);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'updateObit'
     *
     * @param  string $obit_did The given ObitDID argument (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function updateObitRequest($obit_did)
    {
        // verify the required parameter 'obit_did' is set
        if ($obit_did === null || (is_array($obit_did) && count($obit_did) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $obit_did when calling updateObit'
            );
        }

        $resourcePath = '/obits/{obit_did}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($obit_did !== null) {
            $resourcePath = str_replace(
                '{' . 'obit_did' . '}',
                ObjectSerializer::toPathValue($obit_did),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
